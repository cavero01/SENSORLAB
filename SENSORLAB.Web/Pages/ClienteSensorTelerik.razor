@page "/ClienteSensorTelerik"

@inject IServiceClienteSensor serviceClienteSensor


<PageTitle>CLIENTESENSOR</PageTitle>

<h1>CLIENTESENSOR</h1>

<p>CLIENTESENSOR</p>

<TelerikGrid Data="@clienteSensors"
             EditMode="@GridEditMode.Popup"

             Pageable="true"
             Sortable="true"
              OnCreate="@CreateHandler"
              OnDelete="@DeleteHandler"
              OnUpdate="@UpdateHandler"
             
             FilterMode="@GridFilterMode.FilterRow">
    <GridToolBar>
        <GridCommandButton Command="Add" Icon="add">Add Client</GridCommandButton>
    </GridToolBar>
    <GridColumns>
        <GridColumn Field="idEvento" />
        <GridColumn Field="idCliente" />
        <GridColumn Field="idSensor" />
        <GridColumn Field="historico" />
        <GridColumn Field="temp" />
        <GridColumn Field="hum" />
        <GridColumn Field="ubi" />
        <GridColumn Field="custom1" />
        <GridColumn Field="custom2" />
        <GridColumn Field="custom3" />
        <GridCommandColumn>
            <GridCommandButton Command="Save" Icon="save" ShowInEdit="true">Crear</GridCommandButton>
            <GridCommandButton Command="Delete" Icon="delete">Delete</GridCommandButton>
            <GridCommandButton Command="Cancel" Icon="cancel" ShowInEdit="true">Cancel</GridCommandButton>
            <GridCommandButton Command="Edit" Icon="edit">Edit</GridCommandButton>
        </GridCommandColumn>
    </GridColumns>
</TelerikGrid>

@code {

    private List<ClienteSensor> clienteSensors = new();

    protected override async Task OnInitializedAsync()
    {
        clienteSensors = await serviceClienteSensor.RetrieveAllClienteSensorAsync();
       
    }
     async Task CreateHandler(GridCommandEventArgs args)
    {
        ClienteSensor newclienteSensor = (ClienteSensor)args.Item;

        await serviceClienteSensor.AddClienteSensorAsync(newclienteSensor);

        clienteSensors = await serviceClienteSensor.RetrieveAllClienteSensorAsync();

    }
    async Task DeleteHandler(GridCommandEventArgs args)
    {
        ClienteSensor dropclienteSensor = (ClienteSensor)args.Item;

        await serviceClienteSensor.RemoveClienteSensorAsync(dropclienteSensor.idEvento ,dropclienteSensor.idCliente ,dropclienteSensor.idSensor );
        //linea para actualizar la grlla de telerik
      clienteSensors = await serviceClienteSensor.RetrieveAllClienteSensorAsync();
    }
    async Task UpdateHandler(GridCommandEventArgs args)
    {
        ClienteSensor updateclienteSensor = (ClienteSensor)args.Item;

        await serviceClienteSensor.ModifyClienteSensorAsync(updateclienteSensor.idEvento,updateclienteSensor);
         //linea para actualizar la grlla de telerik
       clienteSensors = await serviceClienteSensor.RetrieveAllClienteSensorAsync();
    }
    }